package http

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"

	"teable-go-backend/internal/application"
	"teable-go-backend/internal/infrastructure/database/models"
)

// LicenseHandler 许可证处理器
type LicenseHandler struct {
	service *application.LicenseService
}

// NewLicenseHandler 创建许可证处理器
func NewLicenseHandler(service *application.LicenseService) *LicenseHandler {
	return &LicenseHandler{
		service: service,
	}
}

// CreateLicense 创建许可证
func (h *LicenseHandler) CreateLicense(c *gin.Context) {
	var license models.License
	if err := c.ShouldBindJSON(&license); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "Invalid license data",
			"details": err.Error(),
		})
		return
	}

	// 从上下文中获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{
			"error":   "UNAUTHORIZED",
			"message": "User not authenticated",
		})
		return
	}

	license.CreatedBy = userID.(string)
	
	// 调用服务创建许可证
	if err := h.service.Create(c.Request.Context(), &license); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "CREATE_FAILED",
			"message": "Failed to create license",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusCreated, license)
}

// GetLicense 获取许可证
func (h *LicenseHandler) GetLicense(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "License ID is required",
		})
		return
	}

	// 调用服务获取许可证
	license, err := h.service.GetByID(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "NOT_FOUND",
			"message": "License not found",
		})
		return
	}

	c.JSON(http.StatusOK, license)
}

// ListLicenses 列出许可证
func (h *LicenseHandler) ListLicenses(c *gin.Context) {
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "10"))

	// 调用服务获取列表
	licenses, total, err := h.service.List(c.Request.Context(), page, limit)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "LIST_FAILED",
			"message": "Failed to list licenses",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"data":  licenses,
		"total": total,
		"page":  page,
		"limit": limit,
	})
}

// UpdateLicense 更新许可证
func (h *LicenseHandler) UpdateLicense(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "License ID is required",
		})
		return
	}

	var license models.License
	if err := c.ShouldBindJSON(&license); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "Invalid license data",
			"details": err.Error(),
		})
		return
	}

	license.ID = id
	
	// 调用服务更新许可证
	if err := h.service.Update(c.Request.Context(), id, &license); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "UPDATE_FAILED",
			"message": "Failed to update license",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, license)
}

// DeleteLicense 删除许可证
func (h *LicenseHandler) DeleteLicense(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "License ID is required",
		})
		return
	}

	// 调用服务删除许可证
	if err := h.service.Delete(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "DELETE_FAILED",
			"message": "Failed to delete license",
			"details": err.Error(),
		})
		return
	}

	c.Status(http.StatusNoContent)
}

// CreateLicenseCustomer 创建许可证客户
func (h *LicenseHandler) CreateLicenseCustomer(c *gin.Context) {
	licenseID := c.Param("license_id")
	if licenseID == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "License ID is required",
		})
		return
	}

	var customer models.LicenseCustomer
	if err := c.ShouldBindJSON(&customer); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "Invalid license customer data",
			"details": err.Error(),
		})
		return
	}

	customer.LicenseID = licenseID
	
	// 简化实现：返回创建成功（实际应该有 CustomerService）
	c.JSON(http.StatusCreated, gin.H{
		"message": "License customer created (simplified implementation)",
		"data":    customer,
	})
}

// ListLicenseCustomers 列出许可证客户
func (h *LicenseHandler) ListLicenseCustomers(c *gin.Context) {
	licenseID := c.Param("license_id")
	if licenseID == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "License ID is required",
		})
		return
	}

	// 简化实现：返回空列表（实际应该有 CustomerService）
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "10"))

	c.JSON(http.StatusOK, gin.H{
		"data":  []models.LicenseCustomer{},
		"total": 0,
		"page":  page,
		"limit": limit,
		"note":  "Simplified implementation",
	})
}

// GetLicenseStats 获取许可证统计信息
func (h *LicenseHandler) GetLicenseStats(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "License ID is required",
		})
		return
	}

	// 调用服务获取使用情况
	usage, err := h.service.GetUsage(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "STATS_FAILED",
			"message": "Failed to get license stats",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, usage)
}

// CreateEnterpriseLicense 创建企业许可证
func (h *LicenseHandler) CreateEnterpriseLicense(c *gin.Context) {
	var license models.EnterpriseLicense
	if err := c.ShouldBindJSON(&license); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "INVALID_REQUEST",
			"message": "Invalid enterprise license data",
			"details": err.Error(),
		})
		return
	}

	// 从上下文中获取用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{
			"error":   "UNAUTHORIZED",
			"message": "User not authenticated",
		})
		return
	}

	license.CreatedBy = userID.(string)
	
	// 简化实现：返回创建成功（EnterpriseLicense 可能需要专门的服务）
	c.JSON(http.StatusCreated, gin.H{
		"message": "Enterprise license created (simplified implementation)",
		"data":    license,
	})
}
